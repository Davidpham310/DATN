package com.example.datn.domain.usecase.lesson

import android.util.Log
import com.example.datn.core.utils.Resource
import com.example.datn.domain.models.ContentType
import com.example.datn.domain.models.LessonContent
import com.example.datn.domain.repository.ILessonContentRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.collect
import kotlinx.coroutines.flow.flow
import java.time.Instant
import java.io.InputStream
import javax.inject.Inject

data class UpdateLessonContentParams(
    val contentId: String,
    val lessonId: String,
    val title: String,
    val contentType: ContentType,
    val contentText: String? = null,    // N·∫øu contentType = TEXT, l∆∞u tr·ª±c ti·∫øp
    val order: Int,
    val newFileStream: InputStream? = null,  // N·∫øu c·∫≠p nh·∫≠t file
    val newFileSize: Long = 0
)

class UpdateLessonContentUseCase @Inject constructor(
    private val repository: ILessonContentRepository
) {
    operator fun invoke(params: UpdateLessonContentParams): Flow<Resource<Boolean>> = flow {
        // 1. Emit Loading
        emit(Resource.Loading())

        try {
            // --- B∆Ø·ªöC 1: L·∫•y n·ªôi dung c≈© (Kh√¥ng c·∫ßn thay ƒë·ªïi) ---
            var oldContent: LessonContent? = null
            var fetchError: String? = null

            // L·∫•y n·ªôi dung c≈© (c·∫ßn collect v√¨ n√≥ tr·∫£ v·ªÅ Flow)
            repository.getContentById(params.contentId).collect { result ->
                when (result) {
                    is Resource.Success -> oldContent = result.data
                    is Resource.Error -> fetchError = result.message
                    is Resource.Loading -> {} // B·ªè qua tr·∫°ng th√°i Loading
                }
            }

            if (fetchError != null) {
                emit(Resource.Error(fetchError!!))
                return@flow
            }

            if (oldContent == null) {
                emit(Resource.Error("Kh√¥ng t√¨m th·∫•y n·ªôi dung ƒë·ªÉ c·∫≠p nh·∫≠t"))
                return@flow
            }

            // --- B∆Ø·ªöC 2: T·∫°o b·∫£n c·∫≠p nh·∫≠t ---
            // N·∫øu l√† TEXT, c·∫≠p nh·∫≠t `content` b·∫±ng `contentText` m·ªõi.
            // N·∫øu kh√¥ng ph·∫£i TEXT, gi·ªØ nguy√™n `oldContent.content` (link file) tr·ª´ khi c√≥ file m·ªõi.
            val updatedContent = oldContent!!.copy(
                title = params.title,
                contentType = params.contentType,
                content = if (params.contentType == ContentType.TEXT) params.contentText ?: "" else oldContent.content,
                order = params.order,
                updatedAt = Instant.now()
            )

            // --- B∆Ø·ªöC 3: C·∫≠p nh·∫≠t trong repository (C·∫ßn s·ª≠a) ---
            // L·∫Øng nghe (collect) Flow ƒë∆∞·ª£c tr·∫£ v·ªÅ t·ª´ repository.updateContent
            repository.updateContent(
                contentId = params.contentId,
                content = updatedContent,
                newFileStream = params.newFileStream,
                newFileSize = params.newFileSize
            ).collect { result ->
                when (result) {
                    is Resource.Success -> {
                        // Tr·ª±c ti·∫øp emit k·∫øt qu·∫£ th√†nh c√¥ng/th·∫•t b·∫°i t·ª´ repository
                        if (result.data) {
                            emit(Resource.Success(true))
                        } else {
                            emit(Resource.Error("C·∫≠p nh·∫≠t n·ªôi dung th·∫•t b·∫°i t·ª´ repository"))
                        }
                    }
                    is Resource.Error -> {
                        emit(Resource.Error(result.message ?: "C·∫≠p nh·∫≠t n·ªôi dung th·∫•t b·∫°i"))
                    }
                    is Resource.Loading -> {
                        // C√≥ th·ªÉ emit Loading l·∫ßn n·ªØa, nh∆∞ng th∆∞·ªùng ch·ªâ c·∫ßn emit ·ªü ƒë·∫ßu
                    }
                }
            }

        } catch (e: Exception) {
            Log.e("UpdateLessonContentUC", "üí• Exception: ${e.message}", e)
            emit(Resource.Error(e.message ?: "L·ªói kh√¥ng x√°c ƒë·ªãnh khi c·∫≠p nh·∫≠t n·ªôi dung"))
        }
    }
}