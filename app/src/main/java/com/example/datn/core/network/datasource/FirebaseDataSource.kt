package com.example.datn.core.network.datasource

import com.example.datn.core.base.BaseDataSource
import com.example.datn.core.network.service.FirestoreService
import com.example.datn.core.utils.Resource
import com.example.datn.domain.models.User
import kotlinx.coroutines.tasks.await
import javax.inject.Inject

class FirebaseDataSource @Inject constructor(
    private val firestoreService: FirestoreService,
) : BaseDataSource() {
    // H√†m Helper chuy·ªÉn ƒë·ªïi Result<T> th√†nh Resource<T>
    private fun <T> Result<T>.toResource(): Resource<T> {
        return if (this.isSuccess) {
            Resource.Success(this.getOrThrow())
        } else {
            Resource.Error(this.exceptionOrNull()?.message ?: "Unknown Firebase Error")
        }
    }
    // ==========================================================
    // üîπ USER FIRESTORE OPERATIONS
    // ==========================================================

    /**
     * ‚úÖ L·∫•y th√¥ng tin ng∆∞·ªùi d√πng t·ª´ Firestore theo ID.
     */
    suspend fun getUser(userId: String): User {
        val result = firestoreService.getUserProfile(userId)
        return result.getOrElse { throw it }
    }

    /**
     * ‚úÖ C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng.
     */
    suspend fun updateUser(user: User) {
        val result = firestoreService.updateUserProfile(user)
        result.getOrElse { throw it }
    }

    /**
     * ‚úÖ X√≥a ng∆∞·ªùi d√πng kh·ªèi Firestore.
     */
    suspend fun deleteUser(userId: String) {
        val result = firestoreService.deleteUserProfile(userId)
        result.getOrElse { throw it }
    }

    /**
     * ‚úÖ T·∫°o ng∆∞·ªùi d√πng m·ªõi (v√≠ d·ª• khi ƒëƒÉng k√Ω).
     */
    suspend fun createUser(user: User) {
        val result = firestoreService.createUserProfile(user)
        result.getOrElse { throw it }
    }

    /**
     * ‚úÖ Ki·ªÉm tra xem email ƒë√£ t·ªìn t·∫°i hay ch∆∞a.
     */
    suspend fun checkUserExists(email: String): Boolean {
        val result = firestoreService.checkUserExists(email)
        return result.getOrElse { throw it }
    }

}